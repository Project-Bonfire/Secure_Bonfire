# Copyright (C) 2016 Siavoosh Payandeh Azad

from math import ceil, log
import random
import sys

network_dime_x = 4
network_dime_y = 4
data_width = 32
fifo_depth = 4
routing = 'xy'
random_dest = False
got_finish_time = False
sim_finish_time = None
bit_reversal = False
get_packet_size = False
packet_size_min = 3
packet_size_max = 8
verbal = False
add_NI = False
NI_depth = 0
add_APP = False
frame_size = 0
add_tracker = False


if '-D'  in sys.argv[1:]:
  network_dime_x = int(sys.argv[sys.argv.index('-D')+1])
  network_dime_y = int(sys.argv[sys.argv.index('-D')+2])

if '-DW' in sys.argv[1:]:
  data_width = int(sys.argv[sys.argv.index('-DW')+1])
  if data_width % 2 != 0:
    raise ValueError("wrong data width. please choose powers of 2. for example 32!")

if '-FIFOD' in sys.argv[1:]:
  fifo_depth = int(sys.argv[sys.argv.index('-FIFOD')+1])
  if fifo_depth <= 1:
    raise ValueError("Wrong FIFO depth! FIFO depth must at least be 2 slots.")

if '-routing' in sys.argv[1:]:
  routing = str(sys.argv[sys.argv.index('-routing')+1])
  if routing != 'xy' and routing != 'yx' and routing != 'wf' and routing != 'nl' and routing != 'nf' and routing != 'sr':
    raise ValueError("Invalid routing algorithm or not support by Bonfire yet.")

if '-Rand'  in sys.argv[1:]:
  random_dest = True
  PIR = float(sys.argv[sys.argv.index('-Rand')+1])
  if PIR == 0:
    frame_size = 1
  else :
    frame_size = int(ceil(1.0/PIR))

if '-BR'  in sys.argv[1:]:
  bit_reversal = True
  PIR = float(sys.argv[sys.argv.index('-BR')+1])
  frame_size = int(ceil(1.0/PIR))

if random_dest and bit_reversal:
  raise ValueError("Can not accept multiple traffic patterns at the same time...")

if '-sim'  in sys.argv[1:]:
  got_finish_time = True
  sim_finish_time = int(sys.argv[sys.argv.index('-sim')+1])

if '-NI' in sys.argv[1:]:
    add_NI = True
    NI_depth = int(sys.argv[1:][sys.argv[1:].index('-NI')+1])
    if not (log(NI_depth,2)).is_integer():
        raise ValueError("NI Depth should be powers of 2")

if '-APP' in sys.argv[1:]:
    add_APP = True

if "-trace" in sys.argv[1:]:
  add_tracker = True

if '-PS'  in sys.argv[1:]:
  get_packet_size = True
  packet_size_min = int(sys.argv[sys.argv.index('-PS')+1])
  packet_size_max = int(sys.argv[sys.argv.index('-PS')+2])

if '-verbal' in sys.argv[1:]:
  verbal = True

file_name = 'tb_network'
if random_dest:
  file_name += '_rand'
elif bit_reversal:
  file_name += '_br'

if '-o'  in sys.argv[1:]:
  file_path = sys.argv[sys.argv.index('-o')+1]
  if ".vhd" not in file_path:
      raise ValueError("wrong file extention. only vhdl files are accepted!")
else:
  file_path = file_name+'_'+str(network_dime_x)+"x"+str(network_dime_y)+'.vhd'

noc_file = open(file_path, 'w')


noc_file.write("--Copyright (C) 2016 Siavoosh Payandeh Azad\n")
noc_file.write("------------------------------------------------------------\n")
noc_file.write("-- This file is automatically generated Please do not change!\n")
noc_file.write("-- Here are the parameters:\n")
noc_file.write("-- \t network size x:"+str(network_dime_x)+"\n")
noc_file.write("-- \t network size y:"+str(network_dime_y)+"\n")
noc_file.write("-- \t data width:"+str(data_width))
noc_file.write("-- \t traffic pattern:"+str())
noc_file.write("------------------------------------------------------------\n\n")

noc_file.write("library ieee;\n")
noc_file.write("use ieee.std_logic_1164.all;\n")
noc_file.write("use IEEE.STD_LOGIC_ARITH.ALL;\n")
noc_file.write("use IEEE.STD_LOGIC_UNSIGNED.ALL;\n")
noc_file.write("use work.TB_Package.all;\n\n")
noc_file.write("use work.router_pack.all;\n\n")
noc_file.write("USE ieee.numeric_std.ALL; \n")
noc_file.write("-- use IEEE.math_real.\"ceil\";\n")
noc_file.write("-- use IEEE.math_real.\"log2\";\n\n")

noc_file.write("entity tb_network_"+str(network_dime_x)+"x"+str(network_dime_y)+" is\n")

noc_file.write("end tb_network_"+str(network_dime_x)+"x"+str(network_dime_y)+"; \n")


noc_file.write("\n\n")
noc_file.write("architecture behavior of tb_network_"+str(network_dime_x)+"x"+str(network_dime_y)+" is\n\n")


if add_tracker:
      noc_file.write("component flit_tracker is\n")
      noc_file.write("    generic (\n")
      noc_file.write("        G_NET_SIZE_X   : integer := 4;\n")
      noc_file.write("        G_NET_SIZE_Y   : integer := 4;\n")
      noc_file.write("        G_DATA_WIDTH   : integer := 32;\n")
      noc_file.write("        G_TRACKER_FILE : string :=\"track.txt\"\n")
      noc_file.write("    );\n")
      noc_file.write("    port (\n")
      noc_file.write("        clk      : in std_logic;\n")
      noc_file.write("        reset    : in std_logic;\n")
      noc_file.write("        rx_in    : in std_logic_vector (G_DATA_WIDTH-1 downto 0); \n")
      noc_file.write("        valid_in : in std_logic \n")
      noc_file.write("    );\n")
      noc_file.write("end component;\n")

noc_file.write("-- Declaring network component\n")

noc_file.write("\n")
# noc_file.write("function log2( i : integer) return integer is \n")
# noc_file.write("    variable temp    : integer := i; \n")
# noc_file.write("    variable ret_val : integer := 1; --log2 of 0 should equal 1 because you still need 1 bit to represent 0 \n")
# noc_file.write("  begin                  \n")
# noc_file.write("    while temp > 1 loop \n")
# noc_file.write("      ret_val := ret_val + 1; \n")
# noc_file.write("      temp    := temp / 2;      \n")
# noc_file.write("    end loop; \n")
# noc_file.write("     \n")
# noc_file.write("    return ret_val; \n")
# noc_file.write("  end function; \n")
# noc_file.write("\n")

string_to_print = ""
noc_file.write("component network_"+str(network_dime_x)+"x"+str(network_dime_y)+" is\n")


noc_file.write(" generic (DATA_WIDTH: integer := 32; FIFO_DEPTH: integer := 4; CREDIT_COUNTER_LENGTH: integer := 2; CREDIT_COUNTER_LENGTH_LOCAL: integer := 2);\n")
noc_file.write("port (reset: in  std_logic; \n")
noc_file.write("\tclk: in  std_logic; \n")

for i in range(network_dime_x*network_dime_y):
    noc_file.write("\t--------------\n")
    noc_file.write("\tRX_L_"+str(i)+": in std_logic_vector (DATA_WIDTH-1 downto 0);\n")
    noc_file.write("\tcredit_out_L_"+str(i)+", valid_out_L_"+str(i)+": out std_logic;\n")
    noc_file.write("\tcredit_in_L_"+str(i)+", valid_in_L_"+str(i)+": in std_logic;\n")

    if i == network_dime_x*network_dime_y-1:
        noc_file.write("\tTX_L_"+str(i)+": out std_logic_vector (DATA_WIDTH-1 downto 0)\n")
    else:
        noc_file.write("\tTX_L_"+str(i)+": out std_logic_vector (DATA_WIDTH-1 downto 0);\n")

noc_file.write(string_to_print[:len(string_to_print)-3])
noc_file.write("\n            ); \n")
noc_file.write("end component; \n")




noc_file.write("\n")
noc_file.write("-- generating bulk signals...\n")
for i in range(0, network_dime_x*network_dime_y):
    noc_file.write("\tsignal RX_L_"+str(i)+", TX_L_"+str(i)+":  std_logic_vector ("+str(data_width-1)+" downto 0);\n")
    noc_file.write("\tsignal credit_counter_out_"+str(i)+":  std_logic_vector ("+str(int(ceil(log(fifo_depth)/log(2)))-1)+" downto 0);\n")
    noc_file.write("\tsignal credit_out_L_"+str(i)+", credit_in_L_"+str(i)+", valid_in_L_"+str(i)+", valid_out_L_"+str(i) + ": std_logic;\n")

if add_NI:
    noc_file.write("\tsignal reserved_address :        std_logic_vector(29 downto 0):= \"000000000000000001111111111111\";\n")
    noc_file.write("\tsignal flag_address :            std_logic_vector(29 downto 0):= \"000000000000000010000000000000\" ; -- reserved address for the memory mapped I/O\n")
    noc_file.write("\tsignal counter_address :         std_logic_vector(29 downto 0):= \"000000000000000010000000000001\";\n")
    noc_file.write("\tsignal reconfiguration_address : std_logic_vector(29 downto 0):= \"000000000000000010000000000010\";  -- reserved address for reconfiguration register\n")
    noc_file.write("\tsignal self_diagnosis_address :  std_logic_vector(29 downto 0):= \"000000000000000010000000000011\";\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "irq_out_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic;\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "test_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic_vector(31 downto 0);\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "enable_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic;\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "write_byte_enable_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic_vector(3 downto 0);\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "address_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic_vector(31 downto 2);\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "data_write_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic_vector(31 downto 0);\n")

string_to_print = ""
for i in range(0, network_dime_x*network_dime_y):
    string_to_print += "data_read_"+str(i)+ ", "
noc_file.write("\tsignal "+string_to_print[:-2]+": std_logic_vector(31 downto 0);\n")


noc_file.write("\t--------------\n")
noc_file.write("\tconstant clk_period : time := 10 ns;\n") # Clock period by default is 10 ns!
noc_file.write("\tconstant NoC_size_x : integer := "+str(network_dime_x)+";\n")
noc_file.write("\tconstant NoC_size_y : integer := "+str(network_dime_y)+";\n")
noc_file.write("\tsignal reset, not_reset, clk: std_logic :='0';\n")

noc_file.write("\n")
noc_file.write("begin\n\n")


noc_file.write("   clk_process :process\n")
noc_file.write("   begin\n")
noc_file.write("        clk <= '0';\n")
noc_file.write("        wait for clk_period/2;   \n")
noc_file.write("        clk <= '1';\n")
noc_file.write("        wait for clk_period/2; \n")
noc_file.write("   end process;\n")
noc_file.write("\n")

noc_file.write("reset <= '1' after 1 ns;\n")
noc_file.write("\n")

if add_tracker:
    noc_file.write("-- instantiating the flit trackers\n")
    for i in range(0, network_dime_x*network_dime_y):
        noc_file.write("F_T_"+str(i)+"_T: flit_tracker  generic map (\n")
        noc_file.write("        G_NET_SIZE_X   => "+str(network_dime_x)+", \n")
        noc_file.write("        G_NET_SIZE_Y   => "+str(network_dime_y)+", \n")
        noc_file.write("        G_DATA_WIDTH   => "+str(data_width)+", \n")
        noc_file.write("        G_TRACKER_FILE =>\"traces/track"+str(i)+"_T.txt\"\n")
        noc_file.write("    )\n")
        noc_file.write("    port map (\n")
        noc_file.write("        clk => clk, reset => reset, rx_in => TX_L_"+str(i)+", \n")
        noc_file.write("        valid_in => valid_out_L_"+str(i)+"\n")
        noc_file.write("    );\n")


noc_file.write("-- instantiating the network\n")


string_to_print = ""
string_to_print += "NoC: network_"+str(network_dime_x)+"x"+str(network_dime_y)+" generic map (DATA_WIDTH  => "+str(data_width)+", FIFO_DEPTH => "+str(fifo_depth)+", CREDIT_COUNTER_LENGTH => "+str(int(ceil(log(fifo_depth)/log(2))))+", CREDIT_COUNTER_LENGTH_LOCAL=> "+str(int(ceil(log(NI_depth)/log(2))))+")\n"
string_to_print += "port map (reset, clk, \n"

for i in range(network_dime_x*network_dime_y):
    string_to_print += "\tRX_L_"+str(i)+", credit_out_L_"+str(i)+", valid_out_L_"+str(i)+", credit_in_L_"+str(i)+", valid_in_L_"+str(i)+",  TX_L_"+str(i)+", \n"

noc_file.write(string_to_print[:len(string_to_print)-3])
noc_file.write("\n            ); \n")

noc_file.write("not_reset <= not reset; \n")

if add_NI:
    noc_file.write("\n")
    noc_file.write("-- connecting the NIs\n")

    for node_number in range(0, network_dime_x*network_dime_y):
        noc_file.write("NI_" + str(node_number) + ": NI \n")
        noc_file.write("   generic map(FIFO_DEPTH => " + str(fifo_depth) + ", CREDIT_COUNTER_LENGTH => " + str(int(ceil(log(fifo_depth)/log(2)))) + ",\n")
        noc_file.write("               current_x => " + str(node_number%network_dime_x) + ", current_y => " + str(node_number/network_dime_x) + ",\n")
        noc_file.write("               network_x => " + str(network_dime_x) + ",\n")
        noc_file.write("               NI_depth => " + str(NI_depth) + ",\n")
        noc_file.write("               NI_couter_size => " + str(int(ceil(log(NI_depth)/log(2)))) + "\n")
        noc_file.write("           ) \n")
        noc_file.write("   port map(clk => clk , reset => not_reset , enable => enable_" + str(node_number) + ", \n")
        noc_file.write("        write_byte_enable => write_byte_enable_" + str(node_number) + ", \n")
        noc_file.write("        address => address_" + str(node_number) + ", \n")
        noc_file.write("        data_write => data_write_" + str(node_number) + ", \n")
        noc_file.write("        data_read => data_read_" + str(node_number) + ", \n")
        noc_file.write("        -- interrupt signal: generated evertime a packet is recieved!\n")
        noc_file.write("        irq_out => irq_out_" + str(node_number) + ", \n")
        noc_file.write("        -- signals for sending packets to network\n")

        noc_file.write("        credit_in => credit_out_L_" + str(node_number) + ", \n")
        noc_file.write("        valid_out => valid_in_L_" + str(node_number) + ",\n")

        noc_file.write("        TX => RX_L_" + str(node_number) + ", -- data sent to the NoC\n")
        noc_file.write("        -- signals for reciving packets from the network\n")
        noc_file.write("        credit_out => credit_in_L_" + str(node_number) + ", \n")
        noc_file.write("        valid_in => valid_out_L_" + str(node_number) + ",\n")

        noc_file.write("        RX => TX_L_" + str(node_number) + "\n")
        noc_file.write("  );\n")


    noc_file.write("\n\n")
    noc_file.write("-- connecting the packet generators\n")
    for node_number in range(0, network_dime_x*network_dime_y):
      random_start = random.randint(3, 50)
      if got_finish_time:
        random_end = sim_finish_time
      else:
        random_end = random.randint(random_start, 200)
      appfile = "\"NONE\""
      if add_APP:
        appfile = "\"../../App/app_"+str(node_number)+".txt\""
      # NI_control needs fixing !!!
        noc_file.write("NI_control("+str(network_dime_x)+","+str(network_dime_y)+", "+str(frame_size)+", "+str(node_number)+", "+str(random_start)+", " +str(packet_size_min)+", " +str(packet_size_max)+", "+str(random_end)+" ns, "+appfile+",clk,\n")
      else:
        noc_file.write("NI_control("+str(network_dime_x)+","+str(network_dime_y)+", "+str(frame_size)+", "+str(node_number)+", "+str(random_start)+", " +str(packet_size_min)+", " +str(packet_size_max)+", "+str(random_end)+" ns, \"NONE\",clk,\n")
      noc_file.write("           -- NI configuration\n")
      noc_file.write("           reserved_address, flag_address, counter_address, reconfiguration_address,\n")
      noc_file.write("           -- NI signals\n")
      noc_file.write("           enable_" + str(node_number) + ", write_byte_enable_" + str(node_number) + ", address_" + str(node_number) + ", data_write_" + str(node_number) + ", data_read_" + str(node_number) + ", test_"+str(node_number)+"); \n")
      noc_file.write("\n")
else:

    noc_file.write("\n")
    noc_file.write("-- connecting the packet generators\n")
    if random_dest or bit_reversal:
      for i in range(0, network_dime_x*network_dime_y):
        random_start = random.randint(3, 50)
        if got_finish_time:
          random_end = sim_finish_time
        else:
          random_end = random.randint(random_start, 200)

        noc_file.write("credit_counter_control("+str(fifo_depth)+", "+str(int(ceil(log(fifo_depth)/log(2))))+", clk, credit_out_L_"+str(i)+", valid_in_L_"+str(i)+", credit_counter_out_"+str(i)+");\n")

        if random_dest:
            noc_file.write("gen_random_packet("+str(fifo_depth)+", "+str(int(ceil(log(fifo_depth)/log(2))))+", "+str(network_dime_x)+", "+str(network_dime_y)+", "+str(frame_size)+", "+str(i)+", "+str(random_start)+", " +str(packet_size_min)+", " +str(packet_size_max)+", " +
                            str(random_end)+" ns, clk, credit_counter_out_"+str(i)+", valid_in_L_"+str(i)+", RX_L_"+str(i)+");\n")
        elif bit_reversal:
            noc_file.write("gen_bit_reversed_packet("+str(network_dime_x)+", "+str(network_dime_y)+", "+str(frame_size)+", "+str(i)+", "+str(random_start)+", " +str(packet_size_min)+", " +str(packet_size_max)+", " +
                    str(random_end)+" ns, clk, credit_counter_out_"+str(i)+", valid_in_L_"+str(i)+", RX_L_"+str(i)+");\n")

        noc_file.write("\n")


    noc_file.write("\n")
    noc_file.write("-- connecting the packet receivers\n")
    for i in range(0, network_dime_x*network_dime_y):
        noc_file.write("get_packet("+str(network_dime_x)+", "+str(data_width)+", 5, "+str(i)+", clk, credit_in_L_"+str(i)+", valid_out_L_"+str(i)+",  TX_L_"+str(i)+");\n")

noc_file.write("\n\n")

noc_file.write("end;\n")
